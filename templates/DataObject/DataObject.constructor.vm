    protected $do.getCamelCaseName(true)() {
        super();
    }

## unique key constructors
#foreach($column in $do.getColumns())
#if($column.isUnique())
    public $do.getCamelCaseName(true)(Connection c, $column.getJavaType() $column.getCamelCaseName(false)) throws SQLException {
        load(c, "SELECT " +
#foreach($innerColumn in $do.getColumns())
#if($velocityHasNext)
                "$innerColumn.columnName, " +
#else
                "$innerColumn.columnName " +
#end
#end
            "FROM ${do.getOwningSchema().getSchema()}.$do.getTableName() WHERE $column.getColumnName()=?", Arrays.asList($column.getCamelCaseName(false))
        );
    }

#elseif($column.isReference())
    public static List<${do.getCamelCaseName(true)}> get$do.getCamelCaseName(true)From${column.getCamelCaseName(true)}(Connection c, $column.getJavaType() $column.getCamelCaseName(false)) throws SQLException {
        List<$do.getCamelCaseName(true)> return$do.getCamelCaseName(true) = new ArrayList<>();
        try (
            PreparedStatement ps = c.prepareStatement(
                "SELECT " +
                "$pk.getColumnName() " +
                "FROM ${do.getOwningSchema().getSchema()}.$do.getTableName() WHERE $column.getColumnName()=?"
            );
            ResultSet rs = DataConnector.getEasyResultSet(ps, Arrays.asList($column.getCamelCaseName(false)))
        ) {
            while (rs.next()) {
                return${do.getCamelCaseName(true)}.add(new $do.getCamelCaseName(true)(c, ${pk.getRsIdentifier()}));
            }
            return return${do.getCamelCaseName(true)};
        }



    }
#end
#end